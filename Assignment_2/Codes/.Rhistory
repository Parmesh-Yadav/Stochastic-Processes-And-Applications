set.seed(0)
rm(list=ls())
# DEFINE THE TRANSITION MATRIX
p <- matrix(c(0.3,0.7,
0.5,0.5), ncol = 2, byrow = TRUE)
#NO OF STEPS
n <- 50
#STARTING STATE
s <- 1
#SIMULATING
for (i in 1:n) {
#GOING TO A NEW STATE ACC TO P
n_s <- sample(1:nrow(p),size=1,prob = p[s[length(s)],])
s <- c(s,n_s)
}
#PATH OVER TIME
plot(s)
#PATH OVER TIME
?plot
#PATH OVER TIME
plot(s,type="l")
#PATH OVER TIME
plot(s,xlab = "TIME",ylab = 'STATE')
#PATH OVER TIME
plot(s,xlab = "TIME",ylab = 'STATE',col(red))
#PATH OVER TIME
plot(s,xlab = "TIME",ylab = 'STATE',col("RED"))
install.packages("expm")
library(expm)
p_10 <- p %^% 10
p_20 <- p %^% 20
p_50 <- p %^% 50
print(p_10)
print(p_20)
print(p_50)
# CLEAN R VARIABLES
set.seed(0)
rm(list=ls())
# DEFINE THE TRANSITION MATRIX
p <- matrix(c(0.3,0.7,
0.5,0.5), ncol = 2, byrow = TRUE)
#NO OF STEPS
n <- 50
#STARTING STATE
s <- 1
#SIMULATING
for (i in 1:n) {
#GOING TO A NEW STATE ACC TO P
n_s <- sample(1:nrow(p),size=1,prob = p[s[length(s)],])
s <- c(s,n_s)
}
#PATH OVER TIME
plot(s,xlab = "TIME",ylab = 'STATE')
#PATH OVER TIME
plot(s,xlab = "TIME",ylab = 'STATE',type="l")
#SIMULATING
for (j in 1:5){
for (i in 1:n) {
#GOING TO A NEW STATE ACC TO P
n_s <- sample(1:nrow(p),size=1,prob = p[s[length(s)],])
s <- c(s,n_s)
}
}
#PATH OVER TIME
plot(s,xlab = "TIME",ylab = 'STATE',type="l")
# CLEAN R VARIABLES
set.seed(0)
rm(list=ls())
# DEFINE THE TRANSITION MATRIX
p <- matrix(c(0.3,0.7,
0.5,0.5), ncol = 2, byrow = TRUE)
#NO OF STEPS
n <- 50
#STARTING STATE
s <- 1
#SIMULATING
for (j in 1:5){
for (i in 1:n) {
#GOING TO A NEW STATE ACC TO P
n_s <- sample(1:nrow(p),size=1,prob = p[s[length(s)],])
s <- c(s,n_s)
}
}
#PATH OVER TIME
plot(s,xlab = "TIME",ylab = 'STATE',type="l")
plot(s1,xlab = "TIME",ylab = 'STATE',type="l")
# CLEAN R VARIABLES
set.seed(0)
rm(list=ls())
# DEFINE THE TRANSITION MATRIX
p <- matrix(c(0.3,0.7,
0.5,0.5), ncol = 2, byrow = TRUE)
#NO OF STEPS
n <- 50
#STARTING STATE
s1 <- 1
s2 <- 1
s3 <- 1
s4 <- 1
s5 <- 1
#SIMULATING
for (i in 1:n) {
#GOING TO A NEW STATE ACC TO P
n_s <- sample(1:nrow(p),size=1,prob = p[s[length(s)],])
s1 <- c(s1,n_s)
}
for (i in 1:n) {
#GOING TO A NEW STATE ACC TO P
n_s <- sample(1:nrow(p),size=1,prob = p[s[length(s)],])
s2 <- c(s2,n_s)
}
for (i in 1:n) {
#GOING TO A NEW STATE ACC TO P
n_s <- sample(1:nrow(p),size=1,prob = p[s[length(s)],])
s3 <- c(s3,n_s)
}
for (i in 1:n) {
#GOING TO A NEW STATE ACC TO P
n_s <- sample(1:nrow(p),size=1,prob = p[s[length(s)],])
s4 <- c(s4,n_s)
}
# CLEAN R VARIABLES
set.seed(0)
rm(list=ls())
# DEFINE THE TRANSITION MATRIX
p <- matrix(c(0.3,0.7,
0.5,0.5), ncol = 2, byrow = TRUE)
#NO OF STEPS
n <- 50
#STARTING STATE
s1 <- 1
s2 <- 1
s3 <- 1
s4 <- 1
s5 <- 1
#SIMULATING
for (i in 1:n) {
#GOING TO A NEW STATE ACC TO P
n_s <- sample(1:nrow(p),size=1,prob = p[s1[length(s1)],])
s1 <- c(s1,n_s)
}
for (i in 1:n) {
#GOING TO A NEW STATE ACC TO P
n_s <- sample(1:nrow(p),size=1,prob = p[s2[length(s2)],])
s2 <- c(s2,n_s)
}
for (i in 1:n) {
#GOING TO A NEW STATE ACC TO P
n_s <- sample(1:nrow(p),size=1,prob = p[s3[length(s3)],])
s3 <- c(s3,n_s)
}
for (i in 1:n) {
#GOING TO A NEW STATE ACC TO P
n_s <- sample(1:nrow(p),size=1,prob = p[s4[length(s4)],])
s4 <- c(s4,n_s)
}
for (i in 1:n) {
#GOING TO A NEW STATE ACC TO P
n_s <- sample(1:nrow(p),size=1,prob = p[s5[length(s5)],])
s5 <- c(s5,n_s)
}
#PATH OVER TIME
plot(s1,xlab = "TIME",ylab = 'STATE',type="l")
plot(s2,xlab = "TIME",ylab = 'STATE',type="l")
plot(s3,xlab = "TIME",ylab = 'STATE',type="l")
plot(s4,xlab = "TIME",ylab = 'STATE',type="l")
s <- c(s1,s2,s3,s4,s5)
plot(s)
rm(list=ls()) # CLEAN R ENVR
p <- 0.4 # PROBABILITY OF SUCCESS
t <- 200 # NO. OF TRIALS
bernoulli_scatter_plot<-rbinom(n=t,size=1,p = 0.4)
plot(bernoulli_scatter_plot,
main="Scatter Plot for bernoulli process with p = 0.4",
xlab="Instances of Earthquake",
ylab="Success = 1 / Failure = 0"
)
rm(list=ls()) # CLEAN R ENVR
p <- 0.4 # PROBABILITY OF SUCCESS
t <- 200 # NO. OF TRIALS
geometric_rv_data<-pgeom(0:t,p)# GEOMETRIC RV
plot(geometric_rv_data,
type="l",
xlab="X_1: Geometric RV",
ylab="P[X_1 < x]",
ylim=c(0,1),
main=  "CDF of first interarrival time with p = 0.4"
)
# PART C #
#?rbinom/
rm(list=ls()) # CLEAN R ENVR
p <- c(0.4,0.9) # PROBABILITY OF SUCCESS
t <- 50 # NO. OF TRIALS
binomial_rv_data <- matrix(nrow=t,ncol=length(p)) # BINOMIAL RV
for(i in 1:length(p)) # GENERATING BINOMIAL SAMPLE
{
binomial_rv_data[1:t,i]<-rbinom(n=50,size=t,p=p[i])
}
plot(density(binomial_rv_data[,1]),
ylim=c(0,1),
xlim = c(0,t),
main = "Density curve of number of earthquakes with mag >= 6 for different values of p",
xlab = "No of success n",
ylab = "P[no. of success = n]"
)
points(density(binomial_rv_data[,1]),col="red")
points(density(binomial_rv_data[,2]),col="blue")
legend("topleft",legend = c("p = 0.4","p = 0.9"),c(p[1:2]),fill=c("red","blue"))
# CLEAN R VARIABLES
set.seed(0)
rm(list=ls())
# DEFINE THE TRANSITION MATRIX
p <- matrix(c(0.3,0.7,
0.5,0.5), ncol = 2, byrow = TRUE)
#NO OF STEPS
n <- 50
#STARTING STATE
s1 <- 1
s2 <- 1
s3 <- 1
s4 <- 1
s5 <- 1
#SIMULATING
for (i in 1:n) {
#GOING TO A NEW STATE ACC TO P
n_s <- sample(1:nrow(p),size=1,prob = p[s1[length(s1)],])
s1 <- c(s1,n_s)
}
for (i in 1:n) {
#GOING TO A NEW STATE ACC TO P
n_s <- sample(1:nrow(p),size=1,prob = p[s2[length(s2)],])
s2 <- c(s2,n_s)
}
for (i in 1:n) {
#GOING TO A NEW STATE ACC TO P
n_s <- sample(1:nrow(p),size=1,prob = p[s3[length(s3)],])
s3 <- c(s3,n_s)
}
for (i in 1:n) {
#GOING TO A NEW STATE ACC TO P
n_s <- sample(1:nrow(p),size=1,prob = p[s4[length(s4)],])
s4 <- c(s4,n_s)
}
for (i in 1:n) {
#GOING TO A NEW STATE ACC TO P
n_s <- sample(1:nrow(p),size=1,prob = p[s5[length(s5)],])
s5 <- c(s5,n_s)
}
#PATH OVER TIME
plot(s1,xlab = "TIME",ylab = 'STATE',type="l",
main = "50 Step Markov Chain",
xlab = "Time",
ylab = "State")
#PATH OVER TIME
plot(s1,xlab = "TIME",ylab = 'STATE',type="l",
main = "50 Step Markov Chain")
points(s1,col="red")
#PATH OVER TIME
plot(s1,xlab = "TIME",ylab = 'STATE',
main = "50 Step Markov Chain")
points(s1,col="red")
points(s2,col="blue")
#PATH OVER TIME
plot(s1,xlab = "TIME",ylab = 'STATE',type="l"
main = "50 Step Markov Chain")
#PATH OVER TIME
plot(s1,xlab = "TIME",ylab = 'STATE',type="l",
main = "50 Step Markov Chain")
points(s1,col="red")
points(s2,col="blue")
legend("topleft",legend = c("p = 0.4","p = 0.9"),c(p[1:2]),fill=c("red","blue"))
#PATH OVER TIME
plot(s1,xlab = "TIME",ylab = 'STATE',type="l",
main = "50 Step Markov Chain")
#PATH OVER TIME
plot(s1,xlab = "TIME",ylab = 'STATE',type="0",col="red",pch="o"
main = "50 Step Markov Chain")
#PATH OVER TIME
plot(s1,xlab = "TIME",ylab = 'STATE',type="0",col="red",pch="o",
main = "50 Step Markov Chain")
#PATH OVER TIME
plot(s1,xlab = "TIME",ylab = 'STATE',type="o",col="red",pch="o",
main = "50 Step Markov Chain")
points(s1,col="red")
#PATH OVER TIME
plot(s1,xlab = "TIME",ylab = 'STATE',col="red",pch="o",
main = "50 Step Markov Chain")
#PATH OVER TIME
plot(s1,xlab = "TIME",ylab = 'STATE',type="o",col="red",
main = "50 Step Markov Chain")
points(s2,col="blue",type="o")
points(s3,col="green",type="o")
points(s4,col="orange",type="o")
points(s5,col="purple",type="o")
# CLEAN R VARIABLES
set.seed(0)
rm(list=ls())
# DEFINE THE TRANSITION MATRIX
p <- matrix(c(0.3,0.7,
0.5,0.5), ncol = 2, byrow = TRUE)
i <- matrix(c(1,1,
1,1),ncol = 2, byrow = TRUE)
p_10 <- 1
p_20 <- 1
p_50 <- 1
for (j in 1:50) {
i <- i%*%M
if(j == 10){
p_10 <- i
}
if(j == 20){
p_20 <- i
}
if(j == 50){
p_50 <- i
}
}
for (j in 1:50) {
i <- i%*%p
if(j == 10){
p_10 <- i
}
if(j == 20){
p_20 <- i
}
if(j == 50){
p_50 <- i
}
}
print(p_10)
print(p_20)
print(p_50)
for (j in 1:51) {
i <- i%*%p
if(j == 10){
p_10 <- i
}
if(j == 20){
p_20 <- i
}
if(j == 50){
p_50 <- i
}
}
print(p_10)
print(p_20)
print(p_50)
i <- p
p_10 <- 1
p_20 <- 1
p_50 <- 1
for (j in 2:50) {
i <- i%*%p
if(j == 10){
p_10 <- i
}
if(j == 20){
p_20 <- i
}
if(j == 50){
p_50 <- i
}
}
print(p_10)
print(p_20)
print(p_50)
# QUESTION 2 #
# SIMULATING 1-D RANDOM WALK #
# GAMBLERS RUIN PROBLEM #
# STARTING STATES #
a <- 5
# QUESTION 2 #
# SIMULATING 1-D RANDOM WALK #
# GAMBLERS RUIN PROBLEM #
# CLEAN R VARIABLES
set.seed(0)
# QUESTION 2 #
# SIMULATING 1-D RANDOM WALK #
# GAMBLERS RUIN PROBLEM #
# CLEAN R VARIABLES
set.seed(0)
rm(list=ls())
# STARTING STATES #
a <- 5
b <- 5
# STORE THE OUTCOMES #
s <- a
# SUCCESS PROBABILITIES #
p = c(0.2,0.8)
# SIMULATING #
# USING INFINITE LOOP #
while(2 == 2){
output <- sample(0:1,1,replace = TRUE, prob = p)
if(output == 1){
a <- a + 1
}
else{
a <- a - 1
}
s <- c(s,a)
if(a == 10 || a == 0){
break
}
}
plot(s,xlab = "TIME",ylab = 'GAMBLERS MOMNEY',type="o",col="red",
main = "MOVEMENT OF GAMBLER A")
# SIMULATING #
# USING INFINITE LOOP #
while(2 == 2){
output <- sample(0:1,1,replace = TRUE, prob = p)
if(output == 1){
a <- a + 1
}
else{
a <- a - 1
}
s <- c(s,a)
if(a == 10 || a == 0){
break
}
}
